<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shop.mapper.user">

    <sql id="userColumns">
         ID                    AS id,                  /* 아이디(pk)    */
         LOGIN_ID              AS loginId,             /* 로그인 아이디  */
         WORK_LOGIS_ID         AS workLogisId,         /* 작업 물류센터 ID  */
         LOGIN_PASS            AS loginPass,           /* 로그인 비밀번호  */
         USER_NM               AS userNm,              /* 사용자명  */
         AUTH_CD               AS authCd,              /* 권한 코드  */
         PARTNER_ID            AS partnerId,           /* 파트너 ID  */
         ORG_PARTNER_ID        AS orgPartnerId,        /* 화주 ID  */
         PHONE_NO              AS phoneNo,             /* 전화번호  */
         BELONG_NM             AS belongNm,            /* 소속명  */
         DEPT_NM               AS deptNm,              /* 부서명  */
         POSITION_NM           AS positionNm,          /* 직책명  */
         FILE_ID               AS fileId,              /* 파일 ID  */
         LOGIN_FAIL_CNT        AS loginFailCnt,        /* 로그인 실패 회수  */
         LAST_LOGIN_TM         AS lastLoginDateTime,   /* 최근 로그인 일시  */
         FIRST_LOGIN_YN        AS firstLoginYn,        /* 첫 로그인 여부  */
         OTP_NO                AS otpNo,               /* OTP 발행번호  */
         OTP_ISSU_TM           AS otpIssuTm,           /* OTP 발생일시  */
         CRE_TM                AS creTm,               /* 등록 일시  */
         CRE_USER              AS creUser,             /* 생성자  */
         UPD_TM                AS updTm,               /* 수정 일시  */
         UPD_USER              AS updUser,             /* 수정자  */
         DEL_YN                AS deleteYn,            /* 삭제 여부  */
         USE_YN                AS useYn,               /* 사용 여부  */
         LOCK_YN               AS lockYn,              /* 계정 잠김 여부  */
         AUTH_CD               AS authCd,              /* 권한 코드  */
         WORK_YMD              AS workYmd,             /* 작업 영업일  */
         WORK_LOGIS_ID         AS workLogisId,         /* 물류센터 ID  */
         USER_TYPE             AS userType             /* 사용자 유형  */
    </sql>



    <select id="selectUserListPaging" parameterType="com.shop.core.biz.common.vo.request.PageRequest" resultType="com.shop.core.biz.system.vo.response.UserResponse">
        /* com.shop.mapper.user.selectUserListPaging */
        SELECT ( COUNT(1) OVER() )                                                                          AS totalRowCount
            , ROW_NUMBER() OVER(ORDER BY ID ASC)                                                            AS no
            , TU.ID                                                                                         AS id
            , TU.LOGIN_ID                                                                                   AS loginId
            , TU.LOGIN_PASS                                                                                 AS loginPass
            , TU.USER_NM                                                                                    AS userNm
            , TU.AUTH_CD                                                                                    AS authCd
            , FN_GET_CODE('10020', TU.AUTH_CD)                                                              AS authNm
            , TU.PHONE_NO                                                                                   AS phoneNo
            , TU.BELONG_NM                                                                                  AS belongNm
            , TU.DEPT_NM                                                                                    AS deptNm
            , TU.POSITION_NM                                                                                AS positionNm
            , TU.LOGIN_FAIL_CNT                                                                             AS loginFailCnt
            , TU.LAST_LOGIN_TM                                                                              AS lastLoginTm
            , TU.FIRST_LOGIN_YN                                                                             AS firstLoginYn
            , TU.OTP_NO                                                                                     AS otpNo
            , TU.OTP_ISSU_TM                                                                                AS otpIssuTm
            , TU.CRE_TM                                                                                     AS creTm
            , (SELECT XU.USER_NM FROM TB_USER XU WHERE TU.CRE_USER = XU.LOGIN_ID)                           AS creUser
            , TU.UPD_TM                                                                                     AS updTm
            , (SELECT XU.USER_NM FROM TB_USER XU WHERE TU.UPD_USER = XU.LOGIN_ID)                           AS updUser
            , TU.DEL_YN                                                                                     AS deleteYn
            , (SELECT TP.PARTNER_NM FROM TB_PARTNER TP WHERE TP.ID = TU.PARTNER_ID)                         AS partnerNm
            , (SELECT TP.PARTNER_NM FROM TB_PARTNER TP WHERE TP.ID = TU.ORG_PARTNER_ID)                     AS orgPartnerNm
            , TU.WORK_YMD                                                                                   AS workYmd
            , TU.USER_TYPE                                                                                  AS userType
        FROM TB_USER TU
        WHERE 1 = 1
--           AND DEL_YN = 'N' // 삭제여부를 사용여부로 관리
        <if test='filter.authCd != null and !filter.authCd.equals("")'>
          AND TU.AUTH_CD = #{filter.authCd}
        </if>
        <if test='filter.userNm != null and !filter.userNm.equals("")'>
          AND TU.USER_NM LIKE '%' + #{filter.userNm} + '%'
        </if>
        <if test='filter.phoneNo != null and !filter.phoneNo.equals("")'>
          AND TU.PHONE_NO LIKE '%' + #{filter.phoneNo} + '%'
        </if>
        <if test='filter.belongNm != null and !filter.belongNm.equals("")'>
          AND TU.BELONG_NM LIKE '%' + #{filter.belongNm} + '%'
        </if>
        <if test='filter.deleteYn != null and !filter.deleteYn.equals("")'>
          AND TU.DEL_YN = #{filter.deleteYn}
        </if>
        <if test='filter.deptNm != null and !filter.deptNm.equals("")'>
          AND TU.DEPT_NM LIKE '%' + #{filter.deptNm} + '%'
        </if>
        <if test='filter.positionNm != null and !filter.positionNm.equals("")'>
          AND TU.POSITION_NM LIKE '%' + #{filter.positionNm} + '%'
        </if>
        ORDER BY TU.ID DESC
        OFFSET ((#{curPage}-1) * #{pageRowCount}) ROWS FETCH NEXT #{pageRowCount} ROWS ONLY
    </select>


    <select id="selectUserById" parameterType="Integer" resultType="com.shop.core.biz.system.vo.response.UserResponse$SelectByLoginId">
        /* com.shop.mapper.user.selectUserById */
        SELECT
        <include refid="userColumns" />
        , FN_GET_CODE('10020', TU.AUTH_CD) AS authNm
        , FN_GET_CODE('10020', TU.USER_TYPE) AS userTypeNm
        , FN_GET_USERNAME(TU.CRE_USER)     AS creUser
        , FN_GET_USERNAME(TU.UPD_USER)     AS updUser
        , (SELECT X.LOGIS_NM FROM TB_LOGIS X WHERE X.ID = TU.WORK_LOGIS_ID) AS workLogisNm
        FROM TB_USER TU
        WHERE TU.ID = #{userId}
        AND TU.DEL_YN = 'N'
    </select>

    <select id="selectPartnerIdByUserId" parameterType="java.lang.Integer"  resultType="java.lang.Integer">
        /* com.shop.mapper.user.selectPartnerIdByUserId */
       SELECT PARTNER_ID
         FROM TB_USER
        WHERE ID = #{userId}
    </select>

    <select id="selectPartnerIdByLoginId" parameterType="java.lang.String"  resultType="java.lang.Integer">
        /* com.shop.mapper.user.selectPartnerIdByLoginId */
      SELECT PARTNER_ID
        FROM TB_USER
       WHERE LOGIN_ID = #{loginId}
         AND DEL_YN = 'N'
    </select>

    <select id="selectUserByLoginId" parameterType="String" resultType="com.shop.core.biz.system.vo.response.UserResponse$SelectByLoginId">
        /* com.shop.mapper.user.selectUserByLoginId */
        SELECT
              ID                    AS id
            , LOGIN_ID              AS loginId
            , USER_NM               AS userNm
            , AUTH_CD               AS authCd
            , USER_TYPE             AS userType
            , PARTNER_ID            AS partnerId
            , ORG_PARTNER_ID        AS orgPartnerId
            , PHONE_NO              AS phoneNo
            , BELONG_NM             AS belongNm
            , DEPT_NM               AS deptNm
            , POSITION_NM           AS positionNm
            , FILE_ID               AS fileId
            , LOGIN_FAIL_CNT        AS loginFailCnt
            , LAST_LOGIN_TM         AS lastLoginDateTime
            , FIRST_LOGIN_YN        AS firstLoginYn
            , OTP_NO                AS otpNo
            , OTP_ISSU_TM           AS otpIssuTm
            , CRE_TM                AS creTm
            , UPD_TM                AS updTm
            , DEL_YN                AS deleteYn
            , USE_YN                AS useYn
            , LOCK_YN               AS lockYn
            , AUTH_CD               AS authCd
            , WORK_YMD              AS workYmd
            , WORK_LOGIS_ID         AS workLogisId
            , (SELECT TP.PARTNER_NM FROM TB_PARTNER TP WHERE TP.ID = TU.PARTNER_ID)                         AS partnerNm
            , (SELECT TP.PARTNER_NM FROM TB_PARTNER TP WHERE TP.ID = TU.ORG_PARTNER_ID)                     AS orgPartnerNm
            , (SELECT TP.ADD_TIME FROM TB_PARTNER TP WHERE TP.ID = TU.PARTNER_ID)                           AS addTime
            , FN_GET_USERNAME(TU.LOGIN_ID)                           AS creUserNm
            , FN_GET_USERNAME(TU.UPD_USER)                           AS updUserNm
            , (SELECT TP.UPPER_PARTNER_ID FROM TB_PARTNER TP WHERE TP.ID = TU.PARTNER_ID)                   AS upperPartnerId
            , 0 AS otpSecond
            , (SELECT X.LOGIS_NM FROM TB_LOGIS X WHERE X.ID = TU.WORK_LOGIS_ID) AS workLogisNm
            , FN_GET_CODE('10020', TU.AUTH_CD) AS authNm
            , FN_GET_CODE('10020', TU.USER_TYPE) AS userTypeNm
            , IS_MOBILE_LOGIN
        FROM TB_USER TU
        WHERE LOGIN_ID = #{loginId}
          AND DEL_YN = 'N'
    </select>


    <select id="selectUserByLoginIdForLogin" parameterType="String" resultType="com.shop.core.biz.system.vo.response.UserResponse$SelectByLoginId">
        /* com.shop.mapper.user.selectUserByLoginIdForLogin */
        SELECT
            ID                    AS id
             , LOGIN_ID              AS loginId
             , LOGIN_PASS            AS loginPass
             , USER_NM               AS userNm
             , AUTH_CD               AS authCd
             , USER_TYPE             AS userType
             , PARTNER_ID            AS partnerId
             , ORG_PARTNER_ID        AS orgPartnerId
             , PHONE_NO              AS phoneNo
             , BELONG_NM             AS belongNm
             , DEPT_NM               AS deptNm
             , POSITION_NM           AS positionNm
             , FILE_ID               AS fileId
             , LOGIN_FAIL_CNT        AS loginFailCnt
             , LAST_LOGIN_TM         AS lastLoginDateTime
             , FIRST_LOGIN_YN        AS firstLoginYn
             , OTP_NO                AS otpNo
             , OTP_ISSU_TM           AS otpIssuTm
             , CRE_TM                AS creTm
             , UPD_TM                AS updTm
             , DEL_YN                AS deleteYn
             , USE_YN                AS useYn
             , LOCK_YN               AS lockYn
             , AUTH_CD               AS authCd
             , WORK_YMD              AS workYmd
             , WORK_LOGIS_ID         AS workLogisId
             , 0 AS otpSecond
             , FN_GET_CODE('10020', TU.AUTH_CD) AS authNm
             , FN_GET_CODE('10020', TU.USER_TYPE) AS userTypeNm
             , IS_MOBILE_LOGIN
        FROM TB_USER TU
        WHERE LOGIN_ID = #{loginId}
          AND DEL_YN = 'N'
    </select>

    <select id="selectUserByUk" parameterType="String" resultType="com.shop.core.biz.system.vo.response.UserResponse$SelectByLoginId">
        /* com.shop.mapper.user.selectUserByUk */
        SELECT
        <include refid="userColumns" />
        , 0 AS otpSecond
        FROM TB_USER TU
        WHERE (LOGIN_ID = #{loginId} OR USER_NM = #{userNm})
        AND DEL_YN = 'N'
    </select>

    <insert id="insertUser" parameterType="com.shop.core.entity.User" useGeneratedKeys="true" keyProperty="id">
        /* com.shop.mapper.user.insertUser */
        INSERT INTO TB_USER
        (
              LOGIN_ID
            , LOGIN_PASS
        <if test="partnerId != null">
            , ORG_PARTNER_ID
            , PARTNER_ID
        </if>
            , USER_NM
            , AUTH_CD
            , USER_TYPE
            , PHONE_NO
            , BELONG_NM
        <if test="deptNm != null">
            , DEPT_NM
        </if>
        <if test="positionNm != null">
            , POSITION_NM
        </if>
            , LOGIN_FAIL_CNT
            , LAST_LOGIN_TM
            , FIRST_LOGIN_YN
            , LAST_PASS_CHG_TM
            , CRE_USER
            , UPD_USER
            , WORK_LOGIS_ID
        <if test="isMobileLogin != null">
            , IS_MOBILE_LOGIN
        </if>
        ) VALUES (
              #{loginId}
            , #{loginPass}
        <if test="partnerId != null">
            , #{partnerId}
            , #{partnerId}
        </if>
            , #{userNm}
            , #{authCd}
            , #{userType}
            , #{phoneNo}
            , #{belongNm}
        <if test="deptNm != null">
            , #{deptNm}
        </if>
        <if test="positionNm != null">
            , #{positionNm}
        </if>
            , 0
            , now()
            , 'N'
            , now()
            , #{creUser}
            , #{creUser}
            , #{workLogisId}
        <if test="isMobileLogin != null">
            , #{isMobileLogin}
        </if>
        )
    </insert>

    <insert id="insertOutUser" parameterType="com.shop.core.entity.User" useGeneratedKeys="true" keyProperty="id">
        /* com.shop.mapper.user.insertUser */
        INSERT INTO TB_USER_OUT
        (
              LOGIN_ID
            , LOGIN_PASS
        <if test="orgPartnerId != null">
            , ORG_PARTNER_ID
            , PARTNER_ID
        </if>
            , USER_NM
            , AUTH_CD
            , PHONE_NO
            , BELONG_NM
        <if test="deptNm != null">
            , DEPT_NM
        </if>
        <if test="positionNm != null">
            , POSITION_NM
        </if>
            , LOGIN_FAIL_CNT
            , LAST_LOGIN_TM
            , FIRST_LOGIN_YN
            , LAST_PASS_CHG_TM
            , CRE_USER
            , UPD_USER
        ) VALUES (
              #{loginId}
            , #{loginPass}
        <if test="orgPartnerId != null">
            , #{orgPartnerId}
            , #{orgPartnerId}
        </if>
            , #{userNm}
            , #{authCd}
            , #{phoneNo}
            , #{belongNm}
        <if test="deptNm != null">
            , #{deptNm}
        </if>
        <if test="positionNm != null">
            , #{positionNm}
        </if>
            , 0
            , now()
            , 'N'
            , now()
            , #{creUser}
            , #{creUser}
        )
    </insert>

    <update id="updateUser" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updateUser */
        UPDATE TB_USER
            SET UPD_TM   = NOW()
              , UPD_USER = #{updUser}
            <if test="loginId != null">
                , LOGIN_ID = #{loginId}
            </if>
            <if test="loginPass != null">
                , LOGIN_PASS = #{loginPass}
            </if>
            <if test="orgPartnerId != null">
              , ORG_PARTNER_ID = #{orgPartnerId}
            </if>
            <if test="orgPartnerId != null">
              , PARTNER_ID = #{orgPartnerId}
            </if>
            <if test="userNm != null">
              , USER_NM = #{userNm}
            </if>
            <if test="authCd != null">
                , AUTH_CD = #{authCd}
            </if>
            <if test="userType != null">
                , USER_TYPE = #{userType}
            </if>
            <if test="phoneNo != null">
              , PHONE_NO = #{phoneNo}
            </if>
            <if test="belongNm != null">
              , BELONG_NM = #{belongNm}
            </if>
            <if test="deptNm != null">
              , DEPT_NM = #{deptNm}
            </if>
            <if test="positionNm != null">
              , POSITION_NM = #{positionNm}
            </if>
            <if test="loginFailCnt != null">
              , LOGIN_FAIL_CNT = #{loginFailCnt}
            </if>
            <if test="lastLoginDateTime != null">
              , LAST_LOGIN_TM = #{lastLoginDateTime}
            </if>
            <if test="firstLoginYn != null">
              , FIRST_LOGIN_YN = #{firstLoginYn}
            </if>
            <if test="deleteYn != null">
              , DEL_YN = #{deleteYn}
            </if>
            <if test="useYn != null">
                , USE_YN = #{useYn}
            </if>
            <if test="workYmd != null">
                , WORK_YMD = #{workYmd}
            </if>
            <if test="workLogisId != null">
                , WORK_LOGIS_ID = #{workLogisId}
            </if>
            <if test="fileId != null">
                , FILE_ID = #{fileId}
            </if>
            <if test="isMobileLogin != null">
                , IS_MOBILE_LOGIN = #{isMobileLogin}
            </if>
        WHERE ID = #{id}
    </update>

    <update id="updateUserPartnerId" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updateUserPartnerId */
        UPDATE TB_USER
        SET UPD_TM   = NOW()
          , UPD_USER = #{updUser}
          , PARTNER_ID = #{partnerId}
        WHERE ID = #{id}
    </update>

    <update id="updateUserWorkYmd" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updateUserWorkYmd */
        UPDATE TB_USER
        SET UPD_TM   = NOW()
          , UPD_USER = #{updUser}
          , WORK_YMD = #{workYmd}
        WHERE ID = #{id}
    </update>

    <!--  파트너의 생성시간 조회 -->
    <select id="getPartnerCreatedTime" parameterType="java.lang.Integer" resultType="java.time.LocalDateTime">
        /* com.shop.mapper.user.getPartnerCreatedTime */
        SELECT P.CRE_TM
        FROM TB_PARTNER P
                 INNER JOIN TB_USER U ON U.PARTNER_ID = P.ID
        WHERE U.ID = #{userId}
    </select>

    <update id="updateUserLogisId" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updateUserLogisId */
        UPDATE TB_USER
        SET UPD_TM   = NOW()
          , UPD_USER = #{updUser}
          , WORK_LOGIS_ID = #{workLogisId}
        WHERE ID = #{id}
    </update>

    <delete id="deleteUser" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.deleteUser */
        DELETE
        FROM TB_USER
        WHERE ID = #{id}
    </delete>

    <update id="updateOtpNo" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updateOtpNo */
        UPDATE TB_USER
        SET UPD_TM   = NOW()
          , UPD_USER = #{updUser}
          , OTP_ISSU_TM   = NOW()
          , OTP_NO   = #{otpNo}
        WHERE ID = #{id}
    </update>


    <select id="selectUserPaging" parameterType="com.shop.core.biz.common.vo.request.PageRequest" resultType="com.shop.core.biz.system.vo.response.UserResponse$Paging">
        /* com.shop.mapper.user.selectUserPaging */
        SELECT
            TU.ID AS id
            , TU.LOGIN_ID AS loginId
            , TU.LOGIN_PASS AS loginPass
            , TU.USER_NM AS userNm
            , TU.AUTH_CD AS authCd
            , TU.PARTNER_ID AS partnerId
            , TU.ORG_PARTNER_ID AS orgPartnerId
            , TU.PHONE_NO AS phoneNo
            , TU.BELONG_NM AS belongNm
            , TU.DEPT_NM AS deptNm
            , TU.POSITION_NM AS positionNm
            , TU.LOGIN_FAIL_CNT AS loginFailCnt
            , TU.LAST_LOGIN_TM AS lastLoginDateTime
            , TU.FIRST_LOGIN_YN AS firstLoginYn
            , TU.OTP_NO AS otpNo
            , TU.OTP_ISSU_TM AS otpIssuTm
            , TU.CRE_TM AS creTm
            , TU.CRE_USER AS creUser
            , TU.UPD_TM AS updTm
            , TU.UPD_USER AS updUser
            , TU.DEL_YN AS deleteYn
            , TU.USE_YN AS useYn
            , TU.LOCK_YN AS lockYn
            , TU.AUTH_CD AS authCd
            , TU.WORK_LOGIS_ID AS workLogisId
            , TU.USER_TYPE AS userType
            , ( COUNT(1) OVER() )                                                                               AS totalRowCount
            , ROW_NUMBER() OVER(ORDER BY TU.ID ASC)                                                             AS no
            , CASE WHEN TU.AUTH_CD::integer <![CDATA[<]]> 400
                   THEN CONCAT(FN_GET_CODE('10020',TU.AUTH_CD),' [',FN_GET_PARTNERNM(TU.PARTNER_ID),']')
                   ELSE FN_GET_CODE('10020',TU.AUTH_CD) END AS authNm
            , FN_GET_PARTNERNM(TU.PARTNER_ID)                                                                   AS partnerNm
            , TU.PHONE_NO                                                                                       AS phoneNo
            , (SELECT COUNT(M.ID) FROM TB_USER_MENU M WHERE M.USER_ID = TU.ID AND M.DEL_YN = 'N')               AS userAuthCnt
            , (SELECT L.LOGIS_NM FROM TB_LOGIS L WHERE L.ID = TU.WORK_LOGIS_ID)                                 AS workLogisNm
        FROM TB_USER TU
        <if test="filter.partnerId != null and !filter.partnerId.equals('')">
            LEFT JOIN TB_PARTNER TP ON TU.PARTNER_ID = TP.ID
        </if>
        WHERE TU.DEL_YN = 'N'
            <if test='filter.omsWmsTp != null and filter.omsWmsTp.equals("0")'>
                AND TU.AUTH_CD::integer <![CDATA[<]]> 400
            </if>
            <if test='filter.omsWmsTp != null and filter.omsWmsTp.equals("W")'>
                AND TU.AUTH_CD::integer <![CDATA[>]]> 399
            </if>
            <if test='filter.partnerId != null and !filter.partnerId.equals("")'>
                AND TU.ORG_PARTNER_ID =  #{filter.partnerId}
            </if>
            <if test='filter.loginId != null and !filter.loginId.equals("")'>
                AND TU.LOGIN_ID LIKE '%' || #{filter.loginId} || '%'
            </if>
            <if test='filter.userNm != null and !filter.userNm.equals("")'>
                AND TU.USER_NM LIKE '%' || #{filter.userNm} || '%'
            </if>
            <if test='filter.authCd == null or filter.authCd.equals("")'>
                AND TU.AUTH_CD <![CDATA[<=]]> #{filter.myAuthCd}
            </if>
            <if test='filter.authCd != null and !filter.authCd.equals("")'>
                AND TU.AUTH_CD = #{filter.authCd}
            </if>
            <if test='filter.phoneNo != null and !filter.phoneNo.equals("")'>
                AND TU.PHONE_NO LIKE '%' || #{filter.phoneNo} || '%'
            </if>
            <if test='filter.partnerNm != null and !filter.partnerNm.equals("")'>
                AND EXISTS (SELECT 1 FROM TB_PARTNER P WHERE P.ID = TU.PARTNER_ID AND P.PARTNER_NM LIKE '%' || #{filter.partnerNm} || '%')
            </if>
            <if test='filter.compNm != null and !filter.compNm.equals("")'>
                AND TU.COMP_ID = (SELECT TP.ID FROM TB_COMP TP WHERE TP.COMP_NAME LIKE '%' || #{filter.compNm} || '%')
            </if>
            <if test='filter.belongNm != null and !filter.belongNm.equals("")'>
                AND TU.BELONG_NM LIKE '%' || #{filter.belongNm} || '%'
            </if>
            <if test='filter.deptNm != null and !filter.deptNm.equals("")'>
                AND TU.DEPT_NM LIKE '%' || #{filter.deptNm} || '%'
            </if>
            <if test='filter.positionNm != null and !filter.positionNm.equals("")'>
                AND TU.POSITION_NM LIKE '%' || #{filter.positionNm} || '%'
            </if>
            <if test='filter.useYn != null and !filter.useYn.equals("")'>
                AND TU.USE_YN = #{filter.useYn}
            </if>
            <if test='filter.excludeIds != null and filter.excludeIds.size > 0'>
                AND TU.ID NOT IN
                <foreach collection="filter.excludeIds" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        ORDER BY TU.ID DESC
        OFFSET ((#{curPage}-1) * #{pageRowCount}) ROWS FETCH NEXT #{pageRowCount} ROWS ONLY
    </select>

    <select id="selectUserByLoginIdCountryCode" parameterType="java.util.HashMap" resultType="com.shop.core.biz.system.vo.response.UserResponse$SelectByLoginId">
        /* com.shop.mapper.user.selectUserByLoginIdCountryCode */
        SELECT
            <include refid="userColumns" />
        FROM TB_USER TU
        WHERE 1 = 1
        AND TU.DEL_YN = 'N'
        AND TU.LOGIN_ID = #{loginId}
    </select>

    <update id="updatePassword" parameterType="com.shop.core.entity.User">
        /* com.shop.mapper.user.updatePassword */
        UPDATE TB_USER
        SET UPD_TM = NOW()
            , UPD_USER = #{updUser}
            , FIRST_LOGIN_YN = #{firstLoginYn}
            , LOGIN_FAIL_CNT = 0
            , LOGIN_PASS = #{loginPass}
        <if test='lockYn != null and !lockYn.equals("")'>
            , LOCK_YN = #{lockYn}
        </if>
            , LAST_PASS_CHG_TM = NOW()
        WHERE ID = #{id}
    </update>

    <update id="updatePasswordInit" parameterType="com.shop.core.entity.User">
        UPDATE TB_USER
        SET LOGIN_PASS = #{loginPass}
            , FIRST_LOGIN_YN = 'N'
            , UPD_TM = NOW()
            , UPD_USER = #{updUser}
            , LOGIN_FAIL_CNT = 0
            , LAST_PASS_CHG_TM = NOW()
        WHERE ID = #{id}
    </update>

    <update id="updateUserUnLock">
        UPDATE TB_USER
        SET LOCK_YN = 'N'
          , UPD_TM = NOW()
          , UPD_USER = #{updUser}
          , LOGIN_FAIL_CNT = 0
          , LAST_PASS_CHG_TM = NOW()
        WHERE ID = #{id}
    </update>

    <select id="selectDesinerUserList" parameterType="map" resultType="com.shop.core.entity.User">
        SELECT ROW_NUMBER() OVER(ORDER BY ID ASC),
        <include refid="userColumns" />
        FROM TB_USER
        WHERE PARTNER_ID = #{partnerId}
        <if test="authCd != null">
            AND AUTH_CD = #{authCd}
        </if>
    </select>

    <select id="selectInstockUserList" resultType="com.shop.core.entity.User">
        SELECT
            ID AS id
            , USER_NM AS userNm
            , LOGIN_ID AS loginId
        FROM TB_USER
       WHERE  WORK_LOGIS_ID =  #{workLogisId}
      /*   AND AUTH_CD LIKE '5%'  원래는 물류직원만 조회해야 하는데 관리자도 물류권한으로 많이 한다 일단 막아논다. */
    </select>

    <insert id="createAuthForPartner">
        INSERT INTO TB_USER_MENU (
        USER_ID ,
        MENU_CD ,
        AUTH_YN ,
        CRE_USER ,
        UPD_USER
        )
        SELECT DISTINCT
          #{userId}
        , A.MENU_CD
        , 'Y'
        , #{creUsr}
        , #{creUsr}
        FROM TB_MENU_AUTH A
       WHERE SUBSTR(A.MENU_CD,1,2) IN ('PL','RT','PH','OF','OM','OT','OI') /* OMS 영역만 가져온다. */
         AND A.DEL_YN ='N'
    </insert>

    <update id="updateAuthForDelete">
        UPDATE TB_USER_MENU
           SET DEL_YN = 'Y'
             , UPD_USER = #{updUsr}
         WHERE USER_ID=#{userId}
    </update>

</mapper>
